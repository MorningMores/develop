services:
  mysql:
    image: mysql:8.0
    container_name: concert-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: concert_db
      MYSQL_USER: concert_user
      MYSQL_PASSWORD: concert_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - concert-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  backend:
    build: 
      context: ./main_backend
      dockerfile: Dockerfile
    container_name: concert-backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/concert_db
      SPRING_DATASOURCE_USERNAME: concert_user
      SPRING_DATASOURCE_PASSWORD: concert_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8080:8080"
    networks:
      - concert-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # Dockerized backend tests with JaCoCo + Testcontainers
  backend-tests:
    profiles:
      - tests
    image: maven:3.9.9-eclipse-temurin-21
    container_name: concert-backend-tests
    working_dir: /workspace/main_backend
    privileged: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - MAVEN_CONFIG=/root/.m2
      - MAVEN_OPTS=-XX:+UseParallelGC -Xmx1024m
      - DOCKER_HOST=unix:///var/run/docker.sock
      - TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock
      - TESTCONTAINERS_HOST_OVERRIDE=host.docker.internal
      - TESTCONTAINERS_RYUK_DISABLED=true
      - TESTCONTAINERS_CHECKS_DISABLE=true
    volumes:
      - ./:/workspace
      - ./.cache/m2:/root/.m2
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - concert-network
    command: ["bash", "-lc", "mvn -B -T 1C clean test jacoco:report -Dproject.build.sourceEncoding=UTF-8"]

  frontend:
    image: node:20-alpine
    container_name: concert-frontend
    working_dir: /app
    environment:
      - NODE_ENV=development
      - NUXT_TELEMETRY_DISABLED=1
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
      - BACKEND_BASE_URL=http://backend:8080
    ports:
      - "3000:3000"
    volumes:
      - ./main_frontend/concert1:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - concert-network
    command: ["sh", "-c", "npm ci && npm run dev -- --host 0.0.0.0 --port 3000"]

volumes:
  mysql_data:

networks:
  concert-network:
    driver: bridge
