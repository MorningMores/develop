name: CI/CD Pipeline

on:
  push:
    branches: [ main, version1.0, develop ]
  pull_request:
    branches: [ main, version1.0 ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  # ============================================
  # Frontend Tests
  # ============================================
  frontend-test:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]
      fail-fast: false
    defaults:
      run:
        working-directory: ./main_frontend/concert1
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./main_frontend/concert1/package-lock.json

      - name: 🧹 Clean npm install (workaround oxc-parser)
        run: |
          rm -rf node_modules package-lock.json || true
          npm cache clean --force
          npm install

      - name: 🧪 Run unit tests
        run: npm test -- --run

      - name: 📊 Generate coverage report
        if: matrix.node-version == 20
        run: npm test -- --coverage --run

      - name: 📈 Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          files: ./main_frontend/concert1/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 💾 Upload coverage artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: ./main_frontend/concert1/coverage/
          retention-days: 7

      - name: ⚠️ Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results-node-${{ matrix.node-version }}
          path: |
            ./main_frontend/concert1/test-results/
            ./main_frontend/concert1/coverage/
          retention-days: 7

  # ============================================
  # Backend Tests
  # ============================================
  backend-test:
    name: Backend Tests (JDK ${{ matrix.java-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [21]
    defaults:
      run:
        working-directory: ./main_backend
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: concert_db
          MYSQL_USER: concert_user
          MYSQL_PASSWORD: concert_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: 🔧 Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u concert_user -pconcert_password --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: 🧪 Run backend tests
        run: ./mvnw clean test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/concert_db
          SPRING_DATASOURCE_USERNAME: concert_user
          SPRING_DATASOURCE_PASSWORD: concert_password
          JWT_SECRET: 2c9a26e1fd7b5cf2ec6d9e30e7c0b4a8a6e6c7d9b1f8e2d3c4f5e7a9b0d1c2e3

      - name: 📊 Generate JaCoCo coverage report
        if: matrix.java-version == 21
        run: ./mvnw jacoco:report

      - name: 📈 Upload coverage to Codecov
        if: matrix.java-version == 21
        uses: codecov/codecov-action@v4
        with:
          files: ./main_backend/target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 💾 Upload JaCoCo coverage artifacts
        if: matrix.java-version == 21
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: ./main_backend/target/site/jacoco/
          retention-days: 7

      - name: 💾 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-jdk-${{ matrix.java-version }}
          path: |
            ./main_backend/target/surefire-reports/
            ./main_backend/target/site/jacoco/
          retention-days: 7

      - name: ⚠️ Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs-jdk-${{ matrix.java-version }}
          path: |
            ./main_backend/target/surefire-reports/*.txt
            ./main_backend/logs/
          retention-days: 7

  # ============================================
  # E2E Tests with Playwright
  # ============================================
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    defaults:
      run:
        working-directory: ./main_frontend/concert1
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: concert_db
          MYSQL_USER: concert_user
          MYSQL_PASSWORD: concert_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./main_frontend/concert1/package-lock.json

      - name: ☕ Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: 🧹 Clean npm install (workaround oxc-parser)
        run: |
          rm -rf node_modules package-lock.json || true
          npm cache clean --force
          npm install

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🚀 Start backend server
        working-directory: ./main_backend
        run: |
          ./mvnw spring-boot:run -Dspring-boot.run.profiles=test &
          echo $! > backend.pid
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/concert_db
          SPRING_DATASOURCE_USERNAME: concert_user
          SPRING_DATASOURCE_PASSWORD: concert_password
          JWT_SECRET: 2c9a26e1fd7b5cf2ec6d9e30e7c0b4a8a6e6c7d9b1f8e2d3c4f5e7a9b0d1c2e3

      - name: ⏳ Wait for backend to be ready
        run: |
          for i in {1..60}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null || curl -f http://localhost:8080/api/auth/test 2>/dev/null; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($i/60)"
            sleep 2
          done

      - name: 🚀 Start frontend server
        run: |
          npm run dev &
          echo $! > frontend.pid

      - name: ⏳ Wait for frontend to be ready
        run: |
          for i in {1..60}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "Frontend is ready!"
              break
            fi
            echo "Waiting for frontend... ($i/60)"
            sleep 2
          done

      - name: 🎭 Run Playwright E2E tests
        run: npx playwright test

      - name: 💾 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./main_frontend/concert1/playwright-report/
          retention-days: 7

      - name: 📸 Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: ./main_frontend/concert1/test-results/
          retention-days: 7

      - name: 🛑 Stop servers
        if: always()
        run: |
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi
          if [ -f ../main_backend/backend.pid ]; then kill $(cat ../main_backend/backend.pid) || true; fi

  # ============================================
  # Docker Build & Test
  # ============================================
  docker-build:
    name: Docker Build & Integration Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build Docker images
        run: docker-compose build

      - name: 🚀 Start Docker stack
        run: docker-compose up -d

      - name: ⏳ Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Check MySQL
          for i in {1..30}; do
            if docker-compose exec -T mysql mysqladmin ping -h localhost --silent; then
              echo "MySQL is healthy!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done
          
          # Check Backend
          for i in {1..60}; do
            if curl -f http://localhost:8080/api/auth/test 2>/dev/null; then
              echo "Backend is healthy!"
              break
            fi
            echo "Waiting for backend... ($i/60)"
            sleep 2
          done
          
          # Check Frontend
          for i in {1..60}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "Frontend is healthy!"
              break
            fi
            echo "Waiting for frontend... ($i/60)"
            sleep 2
          done

      - name: 🧪 Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test backend health
          echo "Testing backend health..."
          curl -f http://localhost:8080/api/auth/test || exit 1
          
          # Test frontend
          echo "Testing frontend..."
          curl -f http://localhost:3000 || exit 1
          
          # Test backend API endpoints
          echo "Testing backend API endpoints..."
          curl -f -X POST http://localhost:8080/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","email":"test@example.com","password":"password123"}' || true
          
          echo "Smoke tests completed!"

      - name: 📋 Show container logs
        if: always()
        run: |
          echo "=== Backend logs ==="
          docker-compose logs backend | tail -100
          echo "=== Frontend logs ==="
          docker-compose logs frontend | tail -100
          echo "=== MySQL logs ==="
          docker-compose logs mysql | tail -50

      - name: 💾 Upload Docker logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            docker-compose.yml
            docker-compose.*.yml
          retention-days: 7

      - name: 🛑 Stop Docker stack
        if: always()
        run: docker-compose down -v

      - name: 🐳 Push Docker images (main branch only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker-compose push

  # ============================================
  # Coverage Report Summary
  # ============================================
  coverage-report:
    name: Coverage Report Summary
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: always()
    
    steps:
      - name: 📥 Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-report
          path: ./frontend-coverage
        continue-on-error: true

      - name: 📥 Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-report
          path: ./backend-coverage
        continue-on-error: true

      - name: 📊 Display coverage summary
        run: |
          echo "## 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "./frontend-coverage" ]; then
            echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend coverage report generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "./backend-coverage" ]; then
            echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend coverage report generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "📈 View detailed coverage reports in artifacts" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Status Check
  # ============================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-test, docker-build]
    if: always()
    
    steps:
      - name: ✅ All checks passed
        if: ${{ needs.frontend-test.result == 'success' && needs.backend-test.result == 'success' && needs.e2e-test.result == 'success' && needs.docker-build.result == 'success' }}
        run: |
          echo "## ✅ CI/CD Pipeline Passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed successfully:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ E2E tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker build" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Some checks failed
        if: ${{ needs.frontend-test.result != 'success' || needs.backend-test.result != 'success' || needs.e2e-test.result != 'success' || needs.docker-build.result != 'success' }}
        run: |
          echo "## ❌ CI/CD Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check results:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend tests: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend tests: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E tests: ${{ needs.e2e-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          exit 1
